#include "services_microboone.fcl"
#include "triggeralgo_service.fcl"
#include "gaushitproximity.fcl"
#include "cosmicfilter.fcl"

process_name: ProximityClusterer

services:
{
scheduler:               { defaultExceptions: false }    # Make all uncaught exceptions fatal.
# Load the service that manages root files for histograms.
TFileService:            { fileName: "gaushitproximity_hist.root" }
TimeTracker:             {}
ExptGeoHelperInterface:         @local::microboone_geometry_helper
Geometry:                       @local::microboone_geo
DetectorProperties:             @local::microboone_detproperties
LArProperties:                  @local::microboone_properties
DetectorClocksService:          @local::microboone_detectorclocks
#MemoryTracker:           { ignoreTotal: 1 } # default is one
RandomNumberGenerator:   {} #ART native random number generator
message:                 @local::microboone_message_services_prod_debug
FileCatalogMetadata:     @local::art_file_catalog_mc
@table::microboone_simulation_services
}

services.FileCatalogMetadata.applicationVersion: "develop"
services.FileCatalogMetadata.fileType: "mc"
services.FileCatalogMetadata.runType: "physics"
services.FileCatalogMetadataMicroBooNE: {
FCLName: "run_larlite_maker_mc.fcl"
FCLVersion: "develop"
ProjectName: "LiteMC"
ProjectStage: "LiteMaker"
ProjectVersion: "develop"
}

services.DetectorPropertiesService.NumberTimeSamples: 6400
services.DetectorPropertiesService.ReadOutWindowSize: 6400
services.DetectorClocksService.InheritClockConfig:       false
services.DetectorClocksService.TriggerOffsetTPC:         -0.400e3

#source is now a root file
source:
{
module_type: RootInput
maxEvents:   -1        # Number of events to create
#inputCommands: ["keep *_*_*_*","drop *_*_*_DetSim", "drop *_*_*_G4"]#, "keep sim::MCTrack_*_*_*", "keep recob::Track_*_pandoraCosmic_*" ]

}

#source.inputCommands: ["keep *_*_*_*", "drop anab::T0_*_*_*" ]

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

producers:
{

### random number saver
rns:                 { module_type: RandomNumberSaver }

### gamma catcher
cosmicfilter     : @local::CosmicFilter
gaushitproximity : @local::GausHitProximity
}


reco: [ rns, cosmicfilter, gaushitproximity ]
#reco: [ rns, gaushitproximity ]

#define the output stream, there could be more than one if using filters
stream1:  [ out1 ]

#trigger_paths is a keyword and contains the paths that modify the art::event,
#ie filters and producers
#trigger_paths: [reco]

#end_paths is a keyword and contains the paths that do not modify the art::Event,
#ie analyzers and output streams.  these all run simultaneously
end_paths:     [stream1]

}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
out1:
{
module_type: RootOutput
#fileName:    "/pnfs/uboone/persistent/users/ohanabr/2021/Apr/avinays_proximityclustering_out/gaushitproximity_%r_%s_%tc.root"
fileName:    "gaushitproximity_%r_%s_%tc.root"
dataTier:    "reco"
compressionLevel: 1
#SelectEvents: [reco]
}
}

physics.producers.cosmicfilter.VtxProducer:  ""
physics.producers.cosmicfilter.HitProducer:  "gaushit"
physics.producers.cosmicfilter.TrkProducer:  "pandora"
physics.producers.cosmicfilter.CluProducer:  "pandora"
physics.producers.cosmicfilter.PFPProducer:  "pandora"
physics.producers.cosmicfilter.MinTrkLength: 15

physics.producers.gaushitproximity.HitProducer: "cosmicfilter"
#physics.producers.gaushitproximity.HitProducer: "gaushit"
physics.producers.gaushitproximity.VtxProducer: ""
### Here we include the file giving us run/data dependent overrides
