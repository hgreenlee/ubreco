
#include "services_microboone.fcl"
#include "triggeralgo_service.fcl"
#include "calorimetry_microboone.fcl"
#include "flash_neutrino_id.fcl"
#include "MuCSTrackTagger_module.fcl"
#include "photpropservices_microboone.fcl"


process_name: PFPAna

services:
{
  scheduler:               { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService:            { fileName: "stopmu_ana.root" }
  TimeTracker:             {}
  ExptGeoHelperInterface:         @local::microboone_geometry_helper
  Geometry:                       @local::microboone_geo
  DetectorPropertiesService:             @local::microboone_detproperties
  LArProperties:                  @local::microboone_properties
  DetectorClocksService:          @local::microboone_detectorclocks
  #MemoryTracker:           { ignoreTotal: 1 } # default is one
  RandomNumberGenerator:   {} #ART native random number generator
  message:                 @local::microboone_message_services_prod_debug
  FileCatalogMetadata:     @local::art_file_catalog_mc
  OpDigiProperties:           @local::microboone_opdigiproperties
                              @table::microboone_services_reco
  PhotonVisibilityService:    @local::microboone_photonvisibilityservice
  #@table::microboone_reco_mcc8_services
}

services.DetectorPropertiesService.NumberTimeSamples: 6400
services.DetectorPropertiesService.ReadOutWindowSize: 6400
services.DetectorClocksService.InheritClockConfig:       false
services.DetectorClocksService.TriggerOffsetTPC:         -0.400e3

services.SpaceCharge.EnableCorrSCE: true
services.SpaceCharge.EnableSimEFieldSCE: true
services.SpaceCharge.EnableSimSpatialSCE: true

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:   -1        # Number of events to create
  #inputCommands: ["keep *_*_*_*","drop *_*_*_DetSim", "drop *_*_*_G4"]#, "keep sim::MCTrack_*_*_*", "keep recob::Track_*_pandoraCosmic_*" ]

}

#source.inputCommands: ["keep *_*_*_*", "drop anab::T0_*_*_*" ]

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

    producers:
    {
      #rs:                 { module_type: RandomNumberSaver }
      #pandoracaloN: @local::microboone_calodata
        mucstagger: @local::microboone_MuCSTrackTagger
    }
    analyzers:
    {
        fmatch: { module_type: MuCSFlashMatch
                      PFPproducer: "pandora"
                      Trackproducer: "pandora"
                      SpacePointproducer: "pandora"
                      CTagproducer: "mucstagger" # "MuCSTrackTaggerpandora" #"mucstagger"
                      SliceTool: @local::flash_neutrino_id_tool
                      OnlyTagged: false
                      }
    }

  reco: [ mucstagger ]#rns, pandoracaloN ]
  ana: [ fmatch ]



 #define the output stream, there could be more than one if using filters
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event,
 #ie filters and producers
 trigger_paths: [reco]

 #end_paths is a keyword and contains the paths that do not modify the art::Event,
 #ie analyzers and output streams.  these all run simultaneously
 #end_paths:     [stream1,ana]
 end_paths:     [ana]
}

physics.analyzers.fmatch.SliceTool.tool_type: "FlashMatchingTool"
#physics.analyzers.pfpana.SliceTool.FlashMatchConfig.QLLMatch

#physics.producers.pandoracaloN.TrackModuleLabel: "pandoraTrack"
#physics.producers.pandoracaloN.SpacePointModuleLabel: "pandora"



#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "stopmu.root"
   dataTier:    "reco"
   compressionLevel: 1
   #SelectEvents: [reco]
   }
}

physics.producers.mucstagger.BoxExtension: 20
physics.producers.mucstagger.TrackModuleLabel: "pandora"
physics.producers.mucstagger.Debug: false
physics.producers.mucstagger.UsePMTCalib: true

physics.analyzers.fmatch.SliceTool.FlashMatchConfig.FlashMatchManager.MatchAlgo: "Chi2Match"
physics.analyzers.fmatch.SliceTool.ChargeToNPhotonsTrack: 164. # 240 e-/ADC x 23.6/1e6 MeV/e- x 29,000 gamma/MeV = 164.  [/1.22 = 134.]
physics.analyzers.fmatch.SliceTool.BeamWindowStartTime: -1.5
physics.analyzers.fmatch.SliceTool.BeamWindowEndTime: -0.5
physics.analyzers.fmatch.SliceTool.BeamFlashPEThreshold: 5.0
physics.analyzers.fmatch.SliceTool.FlashLabel: "simpleFlashCosmic"

physics.analyzers.fmatch.SliceTool.FlashMatchConfig.Chi2Match:
{
  RecordHistory: false
  NormalizeHypothesis: false
  QLLMode: 0 # 0 for Chi2, 1 for LLHD
  PEPenaltyThreshold: [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6]
  PEPenaltyValue: [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
  #PEPenaltyThreshold: [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
  #PEPenaltyValue: [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
  XPenaltyThreshold: 30
  ZPenaltyThreshold: 30
  OnePMTScoreThreshold:  0.00001
  OnePMTXDiffThreshold:  35.
  OnePMTPESumThreshold:  500
  OnePMTPEFracThreshold: 0.3
}

### Here we include the file giving us run/data dependent overrides
