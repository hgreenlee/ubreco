#include "services_microboone.fcl"
##include "reco_uboone_mcc8.fcl"
#include "time_memory_tracker_microboone.fcl"
#include "triggeralgo_service.fcl"

process_name: NeutrinoFilter

services:
{
  scheduler:               { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService:            { fileName: "nuefilter.root" }
  TimeTracker:             @local::microboone_time_tracker
  MemoryTracker:           @local::microboone_memory_tracker
  RandomNumberGenerator:   {} #ART native random number generator
  message:                 @local::microboone_message_services_prod_debug
  FileCatalogMetadata:     @local::art_file_catalog_mc
  PhotonVisibilityService:    @local::microboone_photonvisibilityservice
  OpDigiProperties:           @local::microboone_opdigiproperties
                              @table::microboone_services_reco
  #LLMetaMaker:             {Enable: false}
  #LArCVMetaMaker:          {Enable: false}
  #@table::microboone_reco_mcc8_services
}

services.DatabaseUtil.ShouldConnect: false
services.DetPedestalService.DetPedestalRetrievalAlg.UseDB:      false
services.ChannelStatusService.ChannelStatusProvider.UseDB:       false
services.ElectronicsCalibService.ElectronicsCalibProvider.UseDB: false
services.ChannelStatusService.ChannelStatusProvider.UseDB:       false

services.SpaceCharge.EnableCorrSCE: true
services.SpaceCharge.EnableSimEFieldSCE: true
services.SpaceCharge.EnableSimSpatialSCE: true

services.TPCEnergyCalibService.TPCEnergyCalibProvider: @local::microboone_tpcenergycalib_provider_mc
services.TPCEnergyCalibService.TPCEnergyCalibProvider.XNormCorrectionProvider.UseDB:     false
services.TPCEnergyCalibService.TPCEnergyCalibProvider.XShapeCorrectionProvider.UseDB:     false
services.TPCEnergyCalibService.TPCEnergyCalibProvider.XShapeCorrectionProvider_Plane0.UseDB:     false
services.TPCEnergyCalibService.TPCEnergyCalibProvider.XShapeCorrectionProvider_Plane1.UseDB:     false
services.TPCEnergyCalibService.TPCEnergyCalibProvider.XShapeCorrectionProvider_Plane2.UseDB:     false
services.TPCEnergyCalibService.TPCEnergyCalibProvider.YZCorrectionProvider.UseDB:     false
services.TPCEnergyCalibService.TPCEnergyCalibProvider.YZCorrectionProvider_Plane0.UseDB:     false
services.TPCEnergyCalibService.TPCEnergyCalibProvider.YZCorrectionProvider_Plane1.UseDB:     false
services.TPCEnergyCalibService.TPCEnergyCalibProvider.YZCorrectionProvider_Plane2.UseDB:     false
services.TPCEnergyCalibService.TPCEnergyCalibProvider.dEdxCorrectionProvider.UseDB:     false

services.DetectorPropertiesService.NumberTimeSamples:        6400
services.DetectorPropertiesService.ReadOutWindowSize:        6400
services.DetectorClocksService.InheritClockConfig:           false
services.DetectorClocksService.TriggerOffsetTPC:             -0.400e3
services.TFileService.fileName: "shorrecluster_ana.root"
services.BackTrackerService:  @local::microboone_backtrackerservice
services.ParticleInventoryService: @local::standard_particleinventoryservice

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:   -1        # Number of events to create
  #inputCommands: ["keep *_*_*_*","drop *_*_*_DetSim", "drop *_*_*_G4"]#, "keep sim::MCTrack_*_*_*", "keep recob::Track_*_pandoraCosmic_*" ]

}

#source.inputCommands: ["keep *_*_*_*", "drop anab::T0_*_*_*" ]

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

    producers:
 {

  ### random number saver
  rns:                 { module_type: RandomNumberSaver }

 }

 filters:
 {
  nufilter: { module_type: NeutrinoFilter
              ECut: 1.0
            }
 }

 #reco: [ rns, ophit, opflash, simpleFlash, opflashfilter ]
 reco: [ rns, nufilter ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 #trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]

}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "proximity.root"
   dataTier:    "reco"
   compressionLevel: 1
   SelectEvents: [reco]
   }
}

### Here we include the file giving us run/data dependent overrides
