#include "services_microboone.fcl"
#include "triggeralgo_service.fcl"
#include "clustermerger.fcl"
#include "clustermatcher.fcl"
#include "shrreco3d.fcl"
#include "proximityclustering.fcl"
#include "cosmicfilter.fcl"

process_name: ShowerReco3D

services:
{
  scheduler:               { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService:            { fileName: "showerreco_ana.root" }
  TimeTracker:             {}
  ExptGeoHelperInterface:         @local::microboone_geometry_helper
  Geometry:                       @local::microboone_geo
  DetectorPropertiesService:      @local::microboone_detproperties
  LArProperties:                  @local::microboone_properties
  DetectorClocksService:          @local::microboone_detectorclocks
  #MemoryTracker:           { ignoreTotal: 1 } # default is one
  RandomNumberGenerator:   {} #ART native random number generator
  message:                 @local::microboone_message_services_prod_debug
  FileCatalogMetadata:     @local::art_file_catalog_mc
}

services.DetectorPropertiesService.NumberTimeSamples: 6400
services.DetectorPropertiesService.ReadOutWindowSize: 6400
services.DetectorClocksService.InheritClockConfig:       false
services.DetectorClocksService.TriggerOffsetTPC:         -0.400e3

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:   -1        # Number of events to create
  #inputCommands: ["keep *_*_*_*","drop *_*_*_DetSim", "drop *_*_*_G4"]#, "keep sim::MCTrack_*_*_*", "keep recob::Track_*_pandoraCosmic_*" ]

}

#source.inputCommands: ["keep *_*_*_*", "drop anab::T0_*_*_*" ]

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

    producers:
 {

  ### random number saver
  rns:                 { module_type: RandomNumberSaver }
  #ccvertex: { module_type: CCVertex
  #            AssnProducer: "NuMuCCSelectionII"
  #            }
  proximity    : @local::ProximityClustering
  #cosmicfilter : @local::CosmicFilter
  cmerger      : @local::ClusterMerger
  cmatcher     : @local::ClusterMatcher
  showerreco3d : @local::ShrReco3D
 }
 analyzers:
 { 
}

 #reco: [ rns, ophit, opflash, simpleFlash, opflashfilter ]
 reco: [ proximity, cmerger, cmatcher, showerreco3d ]
 ana: [ ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 #trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]
 #end_paths:     [ana]
}

physics.producers.proximity.HitProducer: "nugraphshowerhits"
physics.producers.proximity.VtxProducer: "neutrinovertex"

physics.producers.cmerger.VertexProducer: "neutrinovertex"

physics.producers.cmatcher.VertexProducer: "neutrinovertex"

physics.producers.showerreco3d.VtxProducer: "neutrinovertex"

physics.producers.showerreco3d.ProtoShowerTool:
{
tool_type: "ProtoShowerCMTool"
PFPproducer: "cmatcher"
ClusterProducer: "cmerger"
Vtxproducer: "neutrinovertex"
}

#physics.producers.cosmicfilter.VtxProducer: "ccvertex"
#physics.producers.proximity.VtxProducer:    "ccvertex"
#physics.producers.proximity.HitProducer:    "cosmicfilter"

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "showerreco_full.root"
   dataTier:    "reco"
   compressionLevel: 1
   }
}

### Here we include the file giving us run/data dependent overrides

